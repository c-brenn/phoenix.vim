*phoenix.txt* Plugin for working with Phoenix applications

|phoenix-introduction|     Introduction
|phoenix-navigation|       Navigation
|phoenix-gf|                  File Under Cursor gf
|phoenix-alternate|           Alternate Files
|phoenix-type-navigation|     File Type Navigation


INTRODUCTION                                *phoenix* *phoenix-introduction*
=====================================================================

Whenever you open a file in a Phoenix project, this plugin sets
defines several buffer-specific commands for you.

These commands are aimed to make navigating your Phoenix projects
quick and easy.

NAVIGATION                                           *phoenix-navigation*
=====================================================================

Navigating Phoenix projects efficiently is what this plugin is all
about. To that end, several navigation commands are defined when the
plugin loads. Efficient use of these commands should greatly increase
the speed and ease of navigating Phoenix projects.

First off, the standard Phoenix code locations are prepended to
'path', allowing you to use |:find|
>
       :find page_controller.ex
<
File Under Cursor - gf                                       *phoenix-gf*
---------------------------------------------------------------------

The |gf| command normally edits the file specified by the path under
the cursor. |phoenix.vim| remaps it to take context into account.

Here are some examples of using |gf|, and which files it might bring
you to. (* indicates cursor position)

>
     get "/", Page*Controller, :index
<     web/controllers/page_controller.ex ~
>
     has_many :com*ments
<     web/models/comment.ex ~
>
     channel "rooms:*", MyApp.R*oomChannel
<     web/channels/room_channel.ex ~
>
     alias MyApp.F*oo
<     lib/my_app/foo.ex ~
>
     plug MyApp.Plug.CustomHeaderCheck
<     web/plug/custom_header_check.ex ~

In the last two examples, the module/file name was determined by
taking the text after the last |.|, changing it to snake-case, and
appending |.ex|.  This means that any module in your application that
follows standard Elixir naming conventions should be found by |gf|,
regardless of where in the project the file is.

Alternate Files                                       *phoenix-alternate*
---------------------------------------------------------------------


