*phoenix.vim* Plugin for working with Phoenix applications

|phoenix-introduction|     Introduction
|phoenix-navigation|       Navigation
|phoenix-gf|                  File Under Cursor gf
|phoenix-alternate|           Alternate Files
|phoenix-type-navigation|     File Type Navigation
|phoenix-templates|           Templates
|phoenix-generators|       Generators
|phoenix-server|           Server


INTRODUCTION                             *phoenix* *phoenix-introduction*
=====================================================================

Whenever you open a file in a Phoenix project, this plugin sets
defines several buffer-specific commands for you.

These commands are aimed to make navigating your Phoenix projects
quick and easy.

NAVIGATION                                         *phoenix-navigation*
=====================================================================

Navigating Phoenix projects efficiently is what this plugin is all
about. To that end, several navigation commands are defined when the
plugin loads. Efficient use of these commands should greatly increase
the speed and ease of navigating Phoenix projects.

First off, the standard Phoenix code locations are prepended to
'path', allowing you to use |:find|
>
       :find page_controller.ex
<
---------------------------------------------------------------------
File Under Cursor - gf                                     *phoenix-gf*
---------------------------------------------------------------------

The |gf| command normally edits the file specified by the path under
the cursor. |phoenix.vim| remaps it to take context into account.
|CTRL-W_f| (open in new window) and |CTRL-W_gf| (open in new tab) are
also remapped.

Here are some examples of using |gf|, and which files it might bring
you to. (* indicates cursor position)

>
     get "/", Page*Controller, :index
<     web/controllers/page_controller.ex ~
>
     has_many :com*ments
<     web/models/comment.ex ~
>
     channel "rooms:lobby", MyApp.R*oomChannel
<     web/channels/room_channel.ex ~
>
     alias MyApp.F*oo
<     lib/my_app/foo.ex ~
>
     plug MyApp.Plug.CustomHeaderCheck
<     web/plug/custom_header_check.ex ~

In the last two examples, the module/file name was determined by
taking the text after the last |.|, changing it to snake-case, and
appending |.ex|.  This means that any module in your application that
follows standard Elixir naming conventions should be found by |gf|,
regardless of where in the project the file is.

---------------------------------------------------------------------
Alternate Files                          *phoenix-alternate* *phoenix-:A*
---------------------------------------------------------------------

The |:A| command allows you to quickly jump to the "alternate" file of
the current file. The alternate is usually the test file.These
alternates are defined below.

Current file    Alternate file ~
model            unit test
controller       controller test
channel          channel test
view             view test
template         view



---------------------------------------------------------------------
File Type Navigation                          *phoenix-type-navigation*
---------------------------------------------------------------------

|phoenix.vim| also provides commands for navigating to files of a
specific type. These commands type an argument (with tab completion).

Each of the commands has variants for splitting, vertical splitting,
and opening in a new tab.  For |:Emodel|, those variants would be
|:Smodel|, |:Vmodel| and |:Tmodel|.

                                                *phoenix-:Econtroller*
|:Econtroller| {name}    Edit the specified controller.

                                                     *phoenix-:Emodel*
|:Emodel| {name}         Edit the specified model.

                                                   *phoenix-:Echannel*
|:Echannel| {name}       Edit the specified channel.

                                                      *phoenix-:Eview*
|:Eview| {name}          Edit the specified view.

                                                      *phoenix-:Etest*
|:Etest| {name}          Edit the specified test.

                                                    *phoenix-:Erouter*
|:Erouter|               Edit the router.

                                                       *phoenix-:Emix*
|:Erouter|               Edit the mix file.

                                                    *phoenix-:Econfig*
|:Econfig| {name}        Edit the specified config file.

                                                  *phoenix-:Etemplate*
|:Etemplate| {name}      Edit the specified template.

                                                *phoenix-:Estylesheet*
|:Estylesheet| {name}    Edit the specified stylesheet.

                                                *phoenix-:Ejavascript*
|:Ejavascript| {name}    Edit the specified javascript file.


---------------------------------------------------------------------
Templates                                           *phoenix-templates*
---------------------------------------------------------------------

You can use |:A| or |:Emodel| (and their friends/variations) to
navigate to a file that does not yet exists. |phoenix.vim| allows you
to create these files from templates it provides.

For example, if you wanted to create a new controller:

    :Econtroller foo ~

This will open a new buffer: `web/controllers/foo_controller.ex`

>
 defmodule MyApp.FooController do
   use MyApp.Web, :controller
>
 end
<

|phoenix.vim| provides templates for:
  models, views, controllers, channels and tests


GENERATORS                      *phoenix-generators* *phoenix-:Pgenerate*
=====================================================================

|phoenix.vim| defines the |:Pgenerate| command which allows you to run
'mix phoenix.gen...' from within vim (with basic tab completion).
|:Pgenerate| will load the generated files in the quickfix list and
jump to 'cfirst'.

>
      :Pgenerate html User users email:string
<      !mix phoenix.gen.html User users email:string! ~

|:Pgenerate| will tab complete for the support generators:

>
      :Pgenerate h<tab>
<      :Pgenerate html ~


The supported generators are: model, html, json and channel.

SERVER                                *phoenix-server* *phoenix-:Pserver*
=====================================================================

You can start up 'mix phoenix.server' using |:Pserver|. For Neovim
users, the server will open in a new terminal window.

The size and split of the window can be changed:

>
 let g:phoenix_server_size = 15

 let g:phoenix_server_split = 'split'
<

|g:phoenix_server_split| can take the values: 'split' for a horizontal
split (default) or 'vsplit' for a vertical split.

|:Pserver| will switch back to the server buffer if it is not the
current buffer. If it is the current buffer, it will hide it.

For Vim users this functionality is provided by tpope's fantastic
plugin 'dispatch' which can be found here:

https://github.com/tpope/vim-dispatch

Unfortunately, Vim users won't get the customisability or the
switching/hiding functionality. I would encourage Vim users to
consider switching to Neovim if circumstances allow.

---------------------------------------------------------------------
---------------------------------------------------------------------
                                                     *phoenix-license*

Copyright (c) Conor Brennan.  Distributed under the same terms as Vim
itself.  See |license|.

 vim:tw=70:ts=8:ft=help:norl:
